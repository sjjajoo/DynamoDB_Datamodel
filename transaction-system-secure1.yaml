AWSTemplateFormatVersion: '2010-09-09'
Description: 'Fully Secure Transaction Processing System with VPC, DynamoDB and Lambda'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Environment name

Resources:
  # VPC for Lambda
  TransactionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-transaction-vpc

  # Private Subnets for Lambda
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TransactionVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TransactionVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-private-subnet-2

  # Security Group for Lambda
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref TransactionVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound for AWS services

  # VPC Endpoints for AWS services
  DynamoDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref TransactionVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable

  # Route Table for private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TransactionVPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-private-rt

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # KMS Key for encryption
  TransactionKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key for Transaction System encryption
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
            Condition:
              ArnEquals:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/${Environment}-transaction-api

  TransactionKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${Environment}-transaction-key
      TargetKeyId: !Ref TransactionKMSKey

  # DynamoDB Table with security enhancements
  TransactionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref TransactionKMSKey
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Dead Letter Queue for Lambda
  LambdaDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${Environment}-transaction-dlq
      KmsMasterKeyId: !Ref TransactionKMSKey

  # CloudWatch Logs role for API Gateway
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # API Gateway Account configuration
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn

  # CloudWatch Log Group for API Gateway
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${Environment}-transaction-api
      RetentionInDays: 30
      KmsKeyId: !GetAtt TransactionKMSKey.Arn

  # Lambda Execution Role with VPC permissions
  TransactionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt LambdaDLQ.Arn

  # Separate managed policy for DynamoDB access
  DynamoDBAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:BatchWriteItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:TransactWriteItems
            Resource: 
              - !GetAtt TransactionTable.Arn
              - !Sub "${TransactionTable.Arn}/index/*"
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt LambdaDLQ.Arn
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: !GetAtt TransactionKMSKey.Arn
      Roles:
        - !Ref TransactionLambdaRole

  # Transaction Processing Lambda with VPC configuration
  TransactionProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-transaction-processor-secure
      Handler: index.lambda_handler
      Role: !GetAtt TransactionLambdaRole.Arn
      ReservedConcurrentExecutions: 10
      DeadLetterConfig:
        TargetArn: !GetAtt LambdaDLQ.Arn
      KmsKeyArn: !GetAtt TransactionKMSKey.Arn
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import uuid
          from datetime import datetime
          from botocore.exceptions import ClientError

          # Initialize DynamoDB client
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['DYNAMODB_TABLE_NAME'])

          def create_transaction(transaction_data):
              """Create a new transaction record"""
              transaction_id = str(uuid.uuid4())
              timestamp = datetime.utcnow().isoformat()
              
              try:
                  item = {
                      'PK': f"TRANS#{transaction_id}",
                      'SK': 'METADATA',
                      'customerId': f"CUST#{transaction_data['customer_id']}",
                      'status': transaction_data.get('status', 'PENDING'),
                      'creationTime': timestamp,
                      'transactionType': transaction_data.get('transaction_type'),
                      'deliveryId': f"DEL#{str(uuid.uuid4())}" if 'delivery_id' not in transaction_data else f"DEL#{transaction_data['delivery_id']}",
                      'entityType': 'TRANSACTION',
                      'GSI1PK': f"CUST#{transaction_data['customer_id']}",
                      'GSI1SK': f"TRANS#{timestamp}"
                  }
                  
                  table.put_item(Item=item)
                  return item
                  
              except ClientError as e:
                  print(f"Error creating transaction: {e.response['Error']['Message']}")
                  raise

          def lambda_handler(event, context):
              """Main Lambda handler"""
              try:
                  # Parse the incoming event
                  body = json.loads(event['body']) if isinstance(event.get('body'), str) else event.get('body', {})
                  
                  operation = body.get('operation')
                  data = body.get('data', {})
                  
                  if operation == 'create_transaction':
                      result = create_transaction(data)
                      response = {
                          'transaction_id': result['PK'].split('#')[1],
                          'delivery_id': result['deliveryId'].split('#')[1]
                      }
                  else:
                      return {
                          'statusCode': 400,
                          'body': json.dumps({'error': 'Invalid operation'})
                      }
                      
                  return {
                      'statusCode': 200,
                      'body': json.dumps(response)
                  }
                  
              except Exception as e:
                  print(f"Error processing request: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }

      Runtime: python3.9
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref TransactionTable

  # API Gateway with security enhancements
  TransactionApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${Environment}-transaction-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  TransactionApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TransactionApi
      ParentId: !GetAtt TransactionApi.RootResourceId
      PathPart: transaction

  TransactionApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TransactionApi
      ResourceId: !Ref TransactionApiResource
      HttpMethod: POST
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TransactionProcessingFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: TransactionApiMethod
    Properties:
      RestApiId: !Ref TransactionApi
      Description: !Sub ${Environment} deployment with X-Ray tracing

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref TransactionApi
      StageName: !Ref Environment
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      CacheClusterEnabled: true
      CacheClusterSize: '0.5'
      Variables:
        TracingEnabled: 'true'

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TransactionProcessingFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TransactionApi}/*/*/*

Outputs:
  ApiEndpoint:
    Description: API Endpoint URL
    Value: !Sub https://${TransactionApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/transaction

  TableName:
    Description: DynamoDB Table Name
    Value: !Ref TransactionTable

  LambdaFunction:
    Description: Lambda Function ARN
    Value: !GetAtt TransactionProcessingFunction.Arn

  KMSKeyId:
    Description: KMS Key ID for encryption
    Value: !Ref TransactionKMSKey

  VPCId:
    Description: VPC ID
    Value: !Ref TransactionVPC